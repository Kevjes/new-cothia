import 'package:get/get.dart';
import 'gamification_service.dart';
import '../models/user_profile_model.dart';

class FeatureUnlockService extends GetxService {
  final GamificationService _gamificationService = Get.find<GamificationService>();

  /// Configuration des fonctionnalit√©s d√©bloquables
  static const Map<String, Map<String, dynamic>> featureConfig = {
    // Fonctionnalit√©s de base (toujours d√©bloqu√©es)
    'basic_dashboard': {
      'name': 'Dashboard de base',
      'description': 'Acc√®s au dashboard principal',
      'requiredPoints': 0,
      'requiredLevel': UserLevel.novice,
      'category': 'core',
    },
    'basic_tracking': {
      'name': 'Suivi de base',
      'description': 'Fonctionnalit√©s de suivi essentielles',
      'requiredPoints': 0,
      'requiredLevel': UserLevel.novice,
      'category': 'core',
    },

    // Fonctionnalit√©s Finance
    'advanced_budgets': {
      'name': 'Budgets avanc√©s',
      'description': 'Budgets avec cat√©gories multiples et pr√©visions',
      'requiredPoints': 250,
      'requiredLevel': UserLevel.apprentice,
      'category': 'finance',
    },
    'investment_tracking': {
      'name': 'Suivi d\'investissements',
      'description': 'Suivi des portefeuilles et investissements',
      'requiredPoints': 500,
      'requiredLevel': UserLevel.expert,
      'category': 'finance',
    },
    'automated_transfers': {
      'name': 'Transferts automatis√©s',
      'description': 'Automatisation des transferts et √©pargne',
      'requiredPoints': 750,
      'requiredLevel': UserLevel.expert,
      'category': 'finance',
    },
    'financial_analytics': {
      'name': 'Analytics financi√®res avanc√©es',
      'description': 'Rapports d√©taill√©s et pr√©dictions',
      'requiredPoints': 1000,
      'requiredLevel': UserLevel.master,
      'category': 'finance',
    },

    // Fonctionnalit√©s T√¢ches
    'advanced_projects': {
      'name': 'Gestion de projets avanc√©e',
      'description': 'Projets avec sous-t√¢ches et d√©pendances',
      'requiredPoints': 300,
      'requiredLevel': UserLevel.apprentice,
      'category': 'tasks',
    },
    'time_tracking': {
      'name': 'Suivi du temps',
      'description': 'Chronom√©trage des t√¢ches et rapports de temps',
      'requiredPoints': 600,
      'requiredLevel': UserLevel.expert,
      'category': 'tasks',
    },
    'team_collaboration': {
      'name': 'Collaboration d\'√©quipe',
      'description': 'Partage de projets et assignation de t√¢ches',
      'requiredPoints': 1200,
      'requiredLevel': UserLevel.master,
      'category': 'tasks',
    },

    // Fonctionnalit√©s Habitudes
    'habit_analytics': {
      'name': 'Analytics d\'habitudes',
      'description': 'Analyses approfondies des patterns d\'habitudes',
      'requiredPoints': 400,
      'requiredLevel': UserLevel.apprentice,
      'category': 'habits',
    },
    'advanced_routines': {
      'name': 'Routines avanc√©es',
      'description': 'Routines complexes avec conditions et d√©clencheurs',
      'requiredPoints': 700,
      'requiredLevel': UserLevel.expert,
      'category': 'habits',
    },
    'habit_coaching': {
      'name': 'Coaching d\'habitudes IA',
      'description': 'Suggestions personnalis√©es bas√©es sur l\'IA',
      'requiredPoints': 1500,
      'requiredLevel': UserLevel.master,
      'category': 'habits',
    },

    // Fonctionnalit√©s Premium
    'unlimited_entities': {
      'name': 'Entit√©s illimit√©es',
      'description': 'Cr√©ez autant d\'entit√©s que vous voulez',
      'requiredPoints': 800,
      'requiredLevel': UserLevel.expert,
      'category': 'premium',
    },
    'data_export': {
      'name': 'Export de donn√©es',
      'description': 'Exportez vos donn√©es dans diff√©rents formats',
      'requiredPoints': 1000,
      'requiredLevel': UserLevel.master,
      'category': 'premium',
    },
    'backup_sync': {
      'name': 'Sauvegarde cloud',
      'description': 'Synchronisation automatique dans le cloud',
      'requiredPoints': 1200,
      'requiredLevel': UserLevel.master,
      'category': 'premium',
    },
    'premium_themes': {
      'name': 'Th√®mes premium',
      'description': 'Acc√®s √† des th√®mes exclusifs',
      'requiredPoints': 500,
      'requiredLevel': UserLevel.expert,
      'category': 'premium',
    },
    'advanced_ai': {
      'name': 'IA avanc√©e',
      'description': 'Suggestions IA personnalis√©es et pr√©dictions',
      'requiredPoints': 2000,
      'requiredLevel': UserLevel.legend,
      'category': 'premium',
    },

    // Fonctionnalit√©s sociales
    'achievements_sharing': {
      'name': 'Partage d\'achievements',
      'description': 'Partagez vos succ√®s avec d\'autres utilisateurs',
      'requiredPoints': 350,
      'requiredLevel': UserLevel.apprentice,
      'category': 'social',
    },
    'leaderboards': {
      'name': 'Classements',
      'description': 'Participez aux classements communautaires',
      'requiredPoints': 600,
      'requiredLevel': UserLevel.expert,
      'category': 'social',
    },
    'group_challenges': {
      'name': 'D√©fis de groupe',
      'description': 'Participez √† des d√©fis avec d\'autres utilisateurs',
      'requiredPoints': 900,
      'requiredLevel': UserLevel.expert,
      'category': 'social',
    },
  };

  /// V√©rifie si une fonctionnalit√© est d√©bloqu√©e pour l'utilisateur
  Future<bool> isFeatureUnlocked(String featureId) async {
    final profile = await _gamificationService.getUserProfile();
    if (profile == null) return false;

    // V√©rifier d'abord si c'est d√©j√† d√©bloqu√© manuellement
    if (profile.hasUnlockedFeature(featureId)) return true;

    // V√©rifier les crit√®res automatiques
    return _checkAutomaticUnlock(featureId, profile);
  }

  /// V√©rifie les crit√®res de d√©blocage automatique
  bool _checkAutomaticUnlock(String featureId, UserProfile profile) {
    final config = featureConfig[featureId];
    if (config == null) return false;

    final requiredPoints = config['requiredPoints'] as int;
    final requiredLevel = config['requiredLevel'] as UserLevel;

    // V√©rifier les points et le niveau
    final hasEnoughPoints = profile.totalPoints >= requiredPoints;
    final hasRequiredLevel = _isLevelHigherOrEqual(profile.level, requiredLevel);

    return hasEnoughPoints && hasRequiredLevel;
  }

  /// Compare les niveaux utilisateur
  bool _isLevelHigherOrEqual(UserLevel userLevel, UserLevel requiredLevel) {
    const levelOrder = [
      UserLevel.novice,
      UserLevel.apprentice,
      UserLevel.expert,
      UserLevel.master,
      UserLevel.legend,
    ];

    final userIndex = levelOrder.indexOf(userLevel);
    final requiredIndex = levelOrder.indexOf(requiredLevel);

    return userIndex >= requiredIndex;
  }

  /// V√©rifie et d√©bloque automatiquement les fonctionnalit√©s
  Future<List<String>> checkAndUnlockFeatures() async {
    final profile = await _gamificationService.getUserProfile();
    if (profile == null) return [];

    final newlyUnlocked = <String>[];

    for (final featureId in featureConfig.keys) {
      // Skip si d√©j√† d√©bloqu√©
      if (profile.hasUnlockedFeature(featureId)) continue;

      // V√©rifier les crit√®res
      if (_checkAutomaticUnlock(featureId, profile)) {
        await _gamificationService.unlockFeature(featureId);
        newlyUnlocked.add(featureId);

        // Notification de d√©blocage
        final config = featureConfig[featureId]!;
        Get.snackbar(
          'üîì Nouvelle fonctionnalit√©!',
          config['name'] as String,
          backgroundColor: Get.theme.colorScheme.secondary,
          colorText: Get.theme.colorScheme.onSecondary,
          duration: const Duration(seconds: 4),
        );
      }
    }

    return newlyUnlocked;
  }

  /// R√©cup√®re toutes les fonctionnalit√©s avec leur statut
  Future<Map<String, Map<String, dynamic>>> getAllFeaturesWithStatus() async {
    final profile = await _gamificationService.getUserProfile();
    final featuresWithStatus = <String, Map<String, dynamic>>{};

    for (final entry in featureConfig.entries) {
      final featureId = entry.key;
      final config = Map<String, dynamic>.from(entry.value);

      // Ajouter le statut de d√©blocage
      config['isUnlocked'] = profile != null &&
          (profile.hasUnlockedFeature(featureId) || _checkAutomaticUnlock(featureId, profile));

      // Ajouter les informations de progression
      if (profile != null && !config['isUnlocked']) {
        final requiredPoints = config['requiredPoints'] as int;
        final requiredLevel = config['requiredLevel'] as UserLevel;

        config['pointsProgress'] = profile.totalPoints;
        config['pointsNeeded'] = requiredPoints - profile.totalPoints;
        config['levelProgress'] = profile.level;
        config['levelNeeded'] = requiredLevel;
        config['canUnlock'] = _checkAutomaticUnlock(featureId, profile);
      }

      featuresWithStatus[featureId] = config;
    }

    return featuresWithStatus;
  }

  /// R√©cup√®re les fonctionnalit√©s par cat√©gorie
  Future<Map<String, List<Map<String, dynamic>>>> getFeaturesByCategory() async {
    final allFeatures = await getAllFeaturesWithStatus();
    final categories = <String, List<Map<String, dynamic>>>{};

    for (final entry in allFeatures.entries) {
      final featureId = entry.key;
      final config = entry.value;
      final category = config['category'] as String;

      categories.putIfAbsent(category, () => []);
      categories[category]!.add({
        'id': featureId,
        ...config,
      });
    }

    return categories;
  }

  /// R√©cup√®re les fonctionnalit√©s r√©cemment d√©bloqu√©es
  Future<List<String>> getRecentlyUnlockedFeatures() async {
    final profile = await _gamificationService.getUserProfile();
    if (profile == null) return [];

    // Pour l'instant, on retourne toutes les fonctionnalit√©s d√©bloqu√©es
    // Dans une version future, on pourrait stocker la date de d√©blocage
    return profile.unlockedFeatures.entries
        .where((entry) => entry.value == true)
        .map((entry) => entry.key)
        .toList();
  }

  /// D√©bloque manuellement une fonctionnalit√© (pour les admins/tests)
  Future<void> manuallyUnlockFeature(String featureId) async {
    await _gamificationService.unlockFeature(featureId);
  }

  /// Affiche les d√©tails d'une fonctionnalit√©
  Map<String, dynamic>? getFeatureDetails(String featureId) {
    return featureConfig[featureId];
  }

  /// R√©cup√®re le nom d'affichage d'une cat√©gorie
  String getCategoryDisplayName(String category) {
    switch (category) {
      case 'core':
        return 'Fonctionnalit√©s de base';
      case 'finance':
        return 'Finance avanc√©e';
      case 'tasks':
        return 'Gestion de t√¢ches';
      case 'habits':
        return 'Habitudes avanc√©es';
      case 'premium':
        return 'Fonctionnalit√©s premium';
      case 'social':
        return 'Fonctionnalit√©s sociales';
      default:
        return 'Autres';
    }
  }
}