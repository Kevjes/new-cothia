import 'package:cloud_firestore/cloud_firestore.dart';
import '../../core/constants/app_constants.dart';

class EntityModel {
  final String id;
  final String name;
  final String type; // personal or organization
  final String ownerId; // User ID who owns this entity
  final String? description;
  final String? logoUrl;
  final DateTime createdAt;
  final DateTime updatedAt;

  EntityModel({
    required this.id,
    required this.name,
    required this.type,
    required this.ownerId,
    this.description,
    this.logoUrl,
    required this.createdAt,
    required this.updatedAt,
  });

  bool get isPersonal => type == AppConstants.entityTypePersonal;
  bool get isOrganization => type == AppConstants.entityTypeOrganization;

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'type': type,
      'ownerId': ownerId,
      'description': description,
      'logoUrl': logoUrl,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
    };
  }

  factory EntityModel.fromJson(Map<String, dynamic> json) {
    return EntityModel(
      id: json['id'] ?? '',
      name: json['name'] ?? '',
      type: json['type'] ?? AppConstants.entityTypePersonal,
      ownerId: json['ownerId'] ?? '',
      description: json['description'],
      logoUrl: json['logoUrl'],
      createdAt: json['createdAt'] != null
          ? DateTime.parse(json['createdAt'])
          : DateTime.now(),
      updatedAt: json['updatedAt'] != null
          ? DateTime.parse(json['updatedAt'])
          : DateTime.now(),
    );
  }

  factory EntityModel.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return EntityModel(
      id: doc.id,
      name: data['name'] ?? '',
      type: data['type'] ?? AppConstants.entityTypePersonal,
      ownerId: data['ownerId'] ?? '',
      description: data['description'],
      logoUrl: data['logoUrl'],
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      updatedAt: (data['updatedAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'name': name,
      'type': type,
      'ownerId': ownerId,
      'description': description,
      'logoUrl': logoUrl,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }

  factory EntityModel.createPersonal({
    required String ownerId,
    String? name,
  }) {
    final now = DateTime.now();
    return EntityModel(
      id: '', // Will be generated by Firestore
      name: name ?? AppConstants.defaultPersonalEntityName,
      type: AppConstants.entityTypePersonal,
      ownerId: ownerId,
      description: 'Entit√© personnelle',
      createdAt: now,
      updatedAt: now,
    );
  }

  EntityModel copyWith({
    String? id,
    String? name,
    String? type,
    String? ownerId,
    String? description,
    String? logoUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return EntityModel(
      id: id ?? this.id,
      name: name ?? this.name,
      type: type ?? this.type,
      ownerId: ownerId ?? this.ownerId,
      description: description ?? this.description,
      logoUrl: logoUrl ?? this.logoUrl,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  @override
  String toString() {
    return 'EntityModel(id: $id, name: $name, type: $type, ownerId: $ownerId, description: $description, logoUrl: $logoUrl, createdAt: $createdAt, updatedAt: $updatedAt)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is EntityModel &&
        other.id == id &&
        other.name == name &&
        other.type == type &&
        other.ownerId == ownerId &&
        other.description == description &&
        other.logoUrl == logoUrl &&
        other.createdAt == createdAt &&
        other.updatedAt == updatedAt;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        name.hashCode ^
        type.hashCode ^
        ownerId.hashCode ^
        description.hashCode ^
        logoUrl.hashCode ^
        createdAt.hashCode ^
        updatedAt.hashCode;
  }
}