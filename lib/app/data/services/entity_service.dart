import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/entity_model.dart';
import '../../core/constants/app_constants.dart';

class EntityService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Get all entities for a user
  Future<List<EntityModel>> getUserEntities(String userId) async {
    try {
      final querySnapshot = await _firestore
          .collection(AppConstants.entitiesCollection)
          .where('ownerId', isEqualTo: userId)
          .orderBy('createdAt', descending: false)
          .get();

      return querySnapshot.docs
          .map((doc) => EntityModel.fromFirestore(doc))
          .toList();
    } catch (e) {
      throw Exception('Erreur lors de la récupération des entités: ${e.toString()}');
    }
  }

  // Get personal entity for a user
  Future<EntityModel?> getPersonalEntity(String userId) async {
    try {
      final querySnapshot = await _firestore
          .collection(AppConstants.entitiesCollection)
          .where('ownerId', isEqualTo: userId)
          .where('type', isEqualTo: AppConstants.entityTypePersonal)
          .limit(1)
          .get();

      if (querySnapshot.docs.isNotEmpty) {
        return EntityModel.fromFirestore(querySnapshot.docs.first);
      }
      return null;
    } catch (e) {
      throw Exception('Erreur lors de la récupération de l\'entité personnelle: ${e.toString()}');
    }
  }

  // Get entity by ID
  Future<EntityModel?> getEntityById(String entityId) async {
    try {
      final doc = await _firestore
          .collection(AppConstants.entitiesCollection)
          .doc(entityId)
          .get();

      if (doc.exists) {
        return EntityModel.fromFirestore(doc);
      }
      return null;
    } catch (e) {
      throw Exception('Erreur lors de la récupération de l\'entité: ${e.toString()}');
    }
  }

  // Create a new entity
  Future<EntityModel> createEntity({
    required String name,
    required String type,
    required String ownerId,
    String? description,
    String? logoUrl,
  }) async {
    try {
      final now = DateTime.now();
      final entity = EntityModel(
        id: '', // Will be generated by Firestore
        name: name,
        type: type,
        ownerId: ownerId,
        description: description,
        logoUrl: logoUrl,
        createdAt: now,
        updatedAt: now,
      );

      final docRef = await _firestore
          .collection(AppConstants.entitiesCollection)
          .add(entity.toFirestore());

      return entity.copyWith(id: docRef.id);
    } catch (e) {
      throw Exception('Erreur lors de la création de l\'entité: ${e.toString()}');
    }
  }

  // Update an entity
  Future<EntityModel> updateEntity(EntityModel entity) async {
    try {
      final updatedEntity = entity.copyWith(updatedAt: DateTime.now());

      await _firestore
          .collection(AppConstants.entitiesCollection)
          .doc(entity.id)
          .update(updatedEntity.toFirestore());

      return updatedEntity;
    } catch (e) {
      throw Exception('Erreur lors de la mise à jour de l\'entité: ${e.toString()}');
    }
  }

  // Delete an entity
  Future<void> deleteEntity(String entityId) async {
    try {
      // Check if this is a personal entity (should not be deleted)
      final entity = await getEntityById(entityId);
      if (entity != null && entity.isPersonal) {
        throw Exception('L\'entité personnelle ne peut pas être supprimée');
      }

      await _firestore
          .collection(AppConstants.entitiesCollection)
          .doc(entityId)
          .delete();
    } catch (e) {
      throw Exception('Erreur lors de la suppression de l\'entité: ${e.toString()}');
    }
  }

  // Stream entities for a user
  Stream<List<EntityModel>> streamUserEntities(String userId) {
    return _firestore
        .collection(AppConstants.entitiesCollection)
        .where('ownerId', isEqualTo: userId)
        .orderBy('createdAt', descending: false)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => EntityModel.fromFirestore(doc))
            .toList());
  }

  // Check if entity name already exists for user
  Future<bool> entityNameExists(String name, String userId, {String? excludeId}) async {
    try {
      Query query = _firestore
          .collection(AppConstants.entitiesCollection)
          .where('ownerId', isEqualTo: userId)
          .where('name', isEqualTo: name);

      final querySnapshot = await query.get();

      if (excludeId != null) {
        return querySnapshot.docs.any((doc) => doc.id != excludeId);
      }

      return querySnapshot.docs.isNotEmpty;
    } catch (e) {
      throw Exception('Erreur lors de la vérification du nom de l\'entité: ${e.toString()}');
    }
  }

  // Get entities count for user
  Future<int> getUserEntitiesCount(String userId) async {
    try {
      final querySnapshot = await _firestore
          .collection(AppConstants.entitiesCollection)
          .where('ownerId', isEqualTo: userId)
          .count()
          .get();

      return querySnapshot.count ?? 0;
    } catch (e) {
      throw Exception('Erreur lors du comptage des entités: ${e.toString()}');
    }
  }
}